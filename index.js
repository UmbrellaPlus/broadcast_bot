const { Bot, session, Keyboard } = require("grammy");
const { savePatient, exportPatientsByCity } = require('./db');
const parseBirthday = require('./birthday');
const sendSMS = require('./broadcast');


const bot = new Bot("8302129711:AAHdhGXk8dMwswjZ6M6VCIVHhIu1ZegO2zM");

// –°–µ—Å—Å–∏—è ‚Äî –±—É–¥–µ–º —Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–µ —à–∞–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.use(session({ initial: () => ({ step: "city", data: {} }) }));

// –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
const cityKeyboard = new Keyboard()
    .text("–•–∞—Ä—å–∫–æ–≤").row()
    .text("–ö–∏–µ–≤").row()
    .text("–û–¥–µ—Å—Å–∞").row()
    .text("–î–Ω–µ–ø—Ä").row()
    .text("–ó–∞–ø–æ—Ä–æ–∂—å–µ").row()
    .text("–õ—å–≤–æ–≤")
    .resized();

// –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è
const actionKeyboard = new Keyboard()
    .text("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–∞").row()
    .text("üì¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É").row()
    .text("üìä –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤")
    .resized();

bot.command("start", async (ctx) => {
    ctx.session = { step: "city", data: {} };
    await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", { reply_markup: cityKeyboard });
});

bot.on("message:text", async (ctx) => {
    const step = ctx.session.step;
    const text = ctx.message.text;

    if (step === "city") {
        if (!["–•–∞—Ä—å–∫–æ–≤", "–ö–∏–µ–≤", "–û–¥–µ—Å—Å–∞", "–î–Ω–µ–ø—Ä", "–ó–∞–ø–æ—Ä–æ–∂—å–µ", "–õ—å–≤–æ–≤"].includes(text)) {
            return ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ —Å –∫–Ω–æ–ø–æ–∫.");
        }
        ctx.session.data.city = text;
        ctx.session.step = "action";
        return ctx.reply(`–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥–æ—Ä–æ–¥: ${text}\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?`, {
            reply_markup: actionKeyboard,
        });
    }

    if (step === "action") {
        if (text === "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–∞") {
            ctx.session.step = "address";
            return ctx.reply("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –ø–∞—Ü–∏–µ–Ω—Ç–∞:");
        } else if (text === "üì¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É") {
            ctx.session.step = "done";
            return ctx.reply("–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.");
        } else if (text == "üìä –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤") {
            await exportPatientsByCity(ctx,ctx.session.data.city)
        }else {
            return ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.");
        }
    }

    if (step === "address") {
        ctx.session.data.address = text;
        ctx.session.step = "name";
        return ctx.reply("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–∞—Ü–∏–µ–Ω—Ç–∞ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª):");
    }

    if (step === "name") {
        ctx.session.data.name = text.toLowerCase() !== "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å" ? text : null;
        ctx.session.step = "phone";
        return ctx.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):");
    }

    if (step === "phone") {
        const phone = text.trim();
        if (!/^380\d{9}$/.test(phone)) {
            return ctx.reply("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã).");
        }
        ctx.session.data.phone = phone;
        ctx.session.step = "birthday";
        return ctx.reply("–í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª):");
    }

    const birthday = parseBirthday(text)
    if (step === "birthday") {
        if (!birthday && text.toLowerCase() !== "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å") {
            return ctx.reply("–î–∞—Ç–∞ —É–∫–∞–∑–∞–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì, –Ω–∞–ø—Ä–∏–º–µ—Ä: 25.12.1990");
        }

        ctx.session.data.birthday = birthday;
        ctx.session.step = "doctor"
        return ctx.reply("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–æ–∫—Ç–æ—Ä–∞")
    }

    if (step === "doctor") {
        ctx.session.data.doctor = text;

        const { city, address, name, phone, birthday, doctor } = ctx.session.data;

        const result = `üìÑ –ü–∞—Ü–∏–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω:
–ì–æ—Ä–æ–¥: ${city}
–ê–¥—Ä–µ—Å: ${address}
–ò–º—è: ${name || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}
–¢–µ–ª–µ—Ñ–æ–Ω: ${phone}
–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è: ${birthday || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}
–î–æ–∫—Ç–æ—Ä: ${doctor}`;

        await savePatient({
            city: city,
            address: address,
            name: name || "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
            phone: phone,
            birthday: birthday,
            doctor: doctor
        })

        await ctx.reply(result);

        // –°–±—Ä–æ—Å —Å–µ—Å—Å–∏–∏
        ctx.session = { step: "city", data: {} };
        return ctx.reply("–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–Ω–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞? –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", {
            reply_markup: cityKeyboard,
        });
    }
});

bot.start();
