const { Pool } = require("pg");
const ExcelJS = require("exceljs");
const fs = require("fs");
const path = require("path");
const { InputFile } = require("grammy");

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è)
const pool = new Pool({
    host: "localhost",
    port: 5432,
    user: "postgres",
    password: "Satellite98-", // <-- –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π –ø–∞—Ä–æ–ª—å
    database: "patients", // <-- –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ—é –±–∞–∑—É
});

// ‚úÖ –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–∞ –≤ –±–∞–∑—É
async function savePatient(patient) {
    const { city, address, name, phone, birthday, doctor } = patient;

    try {
        await pool.query(
            `INSERT INTO patients (city, address, name, phone, birthday, doctor)
       VALUES ($1, $2, $3, $4, $5, $6)`,
            [city, address, name, phone, birthday, doctor]
        );

        console.log("‚úÖ –ü–∞—Ü–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.");
    } catch (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞:", err.message);
        throw err;
    }
}

async function getPatientsByCity(city) {
    try {
        const result = await pool.query("SELECT * FROM patients WHERE city = $1", [city]);
        return result.rows;
    } catch (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤:", err.message);
        throw err;
    }
}

async function exportPatientsByCity(ctx, city) {
    try {
        const result = await getPatientsByCity(city)

        const workbook = new ExcelJS.Workbook();
        const worksheet = workbook.addWorksheet(`–ü–∞—Ü–∏–µ–Ω—Ç—ã –∏–∑ ${city}`);

        worksheet.columns = [
            { header: "ID", key: "id", width: 10 },
            { header: "–ì–æ—Ä–æ–¥", key: "city", width: 15 },
            { header: "–ê–¥—Ä–µ—Å", key: "address", width: 20 },
            { header: "–ò–º—è", key: "name", width: 20 },
            { header: "–¢–µ–ª–µ—Ñ–æ–Ω", key: "phone", width: 15 },
            { header: "–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è", key: "birthday", width: 15, style: { numFmt: 'dd.mm.yyyy' } },
            { header: "–î–æ–∫—Ç–æ—Ä", key: "doctor", width: 20 },
            { header: "–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è", key: "created_at", width: 20, style: { numFmt: 'dd.mm.yyyy HH:mm:ss' } },
        ];

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—ã –≤ –æ–±—ä–µ–∫—Ç—ã Date, –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∏
        result.forEach(row => {
            if (row.birthday) row.birthday = new Date(row.birthday);
            if (row.created_at) row.created_at = new Date(row.created_at);
            worksheet.addRow(row);
        });

        // –°–æ–∑–¥–∞—ë–º —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç–∏
        const buffer = await workbook.xlsx.writeBuffer();

        // –ò–º—è —Ñ–∞–π–ª–∞
        const fileName = `patients_${city}_${Date.now()}.xlsx`;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ —á–∞—Ç
        await ctx.replyWithDocument(
            new InputFile(Buffer.from(buffer), fileName),
            {
                caption: `üìÑ –≠–∫—Å–ø–æ—Ä—Ç –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –∏–∑ –≥–æ—Ä–æ–¥–∞ "${city}"`,
            }
        );

        console.log("‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç");

    } catch (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ:", err.message);
        await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ —Ñ–∞–π–ª–∞.");
    }
}

module.exports = {
    savePatient,
    exportPatientsByCity,
    getPatientsByCity
};
